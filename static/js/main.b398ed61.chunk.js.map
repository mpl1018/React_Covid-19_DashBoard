{"version":3,"sources":["MapChart.js","App.js","index.js"],"names":["memo","setTooltipContent","data-tip","projectionConfig","scale","geography","geographies","map","geo","key","rsmKey","onMouseEnter","num","properties","NAME","POP_EST","Math","round","onMouseLeave","style","default","fill","outline","hover","pressed","MyComponent","props","state","error","isLoaded","itemsCountries","time","this","setState","clearInterval","timerID","document","title","setInterval","aumentarTime","fetch","then","res","json","result","console","log","message","Spinner","animation","marginLeft","marginTop","Map","data","React","Component","CardContent","found","i","length","country","myData","graphData","name","cases","deaths","recovered","active","critical","src","countryInfo","flag","width","animate","duration","onLoad","x","y","useState","cardContent","setCardContent","Row","Col","Card","Body","split","App","Container","fluid","Jumbotron","className","textAlign","marginBottom","role","aria-label","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.b398ed61.chunk.js","sourcesContent":["import React, { memo } from \"react\";\r\nimport {\r\n  ZoomableGroup,\r\n  ComposableMap,\r\n  Geographies,\r\n  Geography\r\n} from \"react-simple-maps\";\r\n\r\nconst geoUrl =\r\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\r\n\r\nconst rounded = num => {\r\n  if (num > 1000000000) {\r\n    return Math.round(num / 100000000) / 10 + \"Bn\";\r\n  } else if (num > 1000000) {\r\n    return Math.round(num / 100000) / 10 + \"M\";\r\n  } else {\r\n    return Math.round(num / 100) / 10 + \"K\";\r\n  }\r\n};\r\n\r\nconst MapChart = ({ setTooltipContent }) => {\r\n  return (\r\n    <>\r\n      <ComposableMap data-tip=\"\" projectionConfig={{ scale: 200 }}>\r\n        <ZoomableGroup>\r\n          <Geographies geography={geoUrl}>\r\n            {({ geographies }) =>\r\n              geographies.map(geo => (\r\n                <Geography\r\n                  key={geo.rsmKey}\r\n                  geography={geo}\r\n                  onMouseEnter={() => {\r\n                    const { NAME, POP_EST } = geo.properties;\r\n                    setTooltipContent(`${NAME} â€” ${rounded(POP_EST)}`);\r\n                  }}\r\n                  onMouseLeave={() => {\r\n                    setTooltipContent(\"\");\r\n                  }}\r\n                  style={{\r\n                    default: {\r\n                      fill: \"#D6D6DA\",\r\n                      outline: \"none\"\r\n                    },\r\n                    hover: {\r\n                      fill: \"#F53\",\r\n                      outline: \"none\"\r\n                    },\r\n                    pressed: {\r\n                      fill: \"#E42\",\r\n                      outline: \"none\"\r\n                    }\r\n                  }}\r\n                />\r\n              ))\r\n            }\r\n          </Geographies>\r\n        </ZoomableGroup>\r\n      </ComposableMap>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(MapChart);","import React, { useState } from 'react';\nimport ReactTooltip from \"react-tooltip\";\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Container from 'react-bootstrap/Container';\nimport Spinner from 'react-bootstrap/Spinner';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Card from 'react-bootstrap/Card';\nimport { VictoryBar, VictoryTheme, VictoryChart } from 'victory';\nimport MapChart from \"./MapChart\";\nimport './App.css';\n\n\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      itemsCountries: [],\n      time: 0,\n    };\n  }\n\n  aumentarTime() {\n    this.setState({time: this.state.time+1});\n    if (this.state.time === 2) clearInterval(this.timerID);\n  }\n\n  componentDidMount() {\n    document.title = \"Covid-19 dashboard\";\n    this.timerID = setInterval(\n      () => this.aumentarTime(),\n      1000\n    );\n      fetch(\"https://disease.sh/v3/covid-19/countries\")\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            isLoaded: true,\n            itemsCountries: result\n          });\n        },\n        (error) => {\n          console.log(error)\n        }\n      )\n  }\n\n  render() {\n    const { error, isLoaded, itemsCountries, time } = this.state;\n    if (error) {\n      return <div>Error: {error.message}</div>;\n    } else if (!isLoaded || time<1) {\n      return  <div>\n      <Spinner animation=\"border\" style={{marginLeft: \"50%\", marginTop:\"5%\"}}/>\n      </div>;\n    } else {\n      return (\n        <div>\n        <Map data={itemsCountries}></Map>\n        </div>\n      );\n    }\n  }\n}\n\nfunction CardContent (props){\n  let found = false; \n  let i = 0; \n  while (i < props.data.length && !found){\n    if (props.data[i].country === props.country) {\n      found = true; \n    }\n    if (!found)++i;\n  }\n  if (!found) return \"Pasa el ratÃ³n sobre el mapa para mostrar la info\"; \n  else {\n    const myData = props.data[i]; \n    const graphData = [\n      {name: 'CasesðŸ’Š' , num: myData.cases},\n      {name: 'Deaths' , num: myData.deaths},\n      {name: 'RecoveredðŸŽ‰' , num: myData.recovered},\n      {name: 'ActiveðŸ¤¢' , num: myData.active},\n      {name: 'CriticalðŸš¨' , num: myData.critical},\n\n    ]\n\n    return (\n      <div> \n        {props.country}\n        <img src={myData.countryInfo.flag} style={{width: \"4%\", marginLeft: \"2%\"}}></img>\n        <div >\n          <VictoryChart >\n          <VictoryBar  \n          style={{ data: { fill: \"#fcb045\" } }}\n          data={graphData}\n          animate={{\n            duration: 2000,\n            onLoad: { duration: 1000 }\n          }}\n          x=\"name\"\n          y=\"num\"\n          />\n          </VictoryChart>\n        </div>\n      </div>\n    )\n  }\n}\n\nfunction Map(props) {\n  const [cardContent, setCardContent] = useState(\"Pasa el ratÃ³n sobre el mapa para mostrar la info\")\n  return (\n    <div>\n      <Row>\n        <Col>\n          <Card style={{ width: \"100%\"}}>\n          <MapChart width=\"400\" setTooltipContent={ setCardContent} /> \n          <ReactTooltip>{cardContent }</ReactTooltip>\n          </Card>\n        </Col>\n        <Col>\n          <Card><Card.Body><CardContent country={cardContent.split(\" â€” \")[0]} data = {props.data}></CardContent></Card.Body></Card>\n        </Col>\n      </Row>\n\n    </div>\n  );\n}\n\n\nconst App = () => (\n  <Container fluid>\n    <Jumbotron>\n      <h1 className=\"header\" style={{textAlign: \"center\", marginBottom: \"3%\"}}>Welcome to the Covid-19 dashboard\n      <span role=\"img\" aria-label=\"tada\">\n      ðŸ¦ \n      </span>\n      </h1>\n      <MyComponent></MyComponent>\n    </Jumbotron>\n  </Container>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n// Importing the Bootstrap CSS\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}